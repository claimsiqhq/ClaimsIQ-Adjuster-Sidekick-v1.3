-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.app_prompts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  org_id uuid,
  key text NOT NULL,
  role text NOT NULL CHECK (role = ANY (ARRAY['system'::text, 'user'::text, 'tool'::text])),
  description text,
  template text NOT NULL,
  is_active boolean NOT NULL DEFAULT true,
  CONSTRAINT app_prompts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.app_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  org_id uuid,
  key text NOT NULL UNIQUE,
  description text,
  value jsonb NOT NULL,
  CONSTRAINT app_settings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.claims (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  claim_number text NOT NULL UNIQUE,
  org_id uuid,
  user_id uuid,
  insured_name text,
  insured_phone text,
  insured_email text,
  loss_date timestamp with time zone,
  reported_date timestamp with time zone,
  loss_type text,
  status text DEFAULT 'open'::text CHECK (status = ANY (ARRAY['open'::text, 'in_progress'::text, 'completed'::text, 'closed'::text])),
  property_address jsonb,
  metadata jsonb,
  policy_number text,
  carrier_name text,
  adjuster_name text,
  adjuster_email text,
  adjuster_phone text,
  loss_location text,
  loss_description text,
  cause_of_loss text,
  estimated_loss numeric,
  time_of_loss text,
  date_prepared timestamp with time zone,
  reporter_name text,
  reporter_phone text,
  CONSTRAINT claims_pkey PRIMARY KEY (id)
);
CREATE TABLE public.documents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  claim_id uuid,
  user_id uuid,
  org_id uuid,
  document_type text NOT NULL CHECK (document_type = ANY (ARRAY['fnol'::text, 'estimate'::text, 'photo'::text, 'report'::text, 'invoice'::text, 'correspondence'::text, 'other'::text])),
  file_name text NOT NULL,
  storage_path text NOT NULL,
  mime_type text,
  file_size_bytes bigint,
  extracted_data jsonb,
  extraction_status text DEFAULT 'pending'::text CHECK (extraction_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'error'::text])),
  extraction_error text,
  extraction_confidence numeric,
  metadata jsonb,
  tags ARRAY,
  CONSTRAINT documents_pkey PRIMARY KEY (id),
  CONSTRAINT documents_claim_id_fkey FOREIGN KEY (claim_id) REFERENCES public.claims(id)
);
CREATE TABLE public.inspection_steps (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  claim_id uuid NOT NULL,
  org_id uuid,
  step_order integer NOT NULL,
  orig_id text,
  title text NOT NULL,
  kind text NOT NULL CHECK (kind = ANY (ARRAY['photo'::text, 'scan'::text, 'doc'::text, 'note'::text, 'measure'::text])),
  instructions text,
  evidence_rules jsonb,
  validation jsonb,
  next_steps ARRAY,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text, 'skipped'::text])),
  completed_at timestamp with time zone,
  completed_by uuid,
  metadata jsonb,
  CONSTRAINT inspection_steps_pkey PRIMARY KEY (id),
  CONSTRAINT inspection_steps_claim_id_fkey FOREIGN KEY (claim_id) REFERENCES public.claims(id)
);
CREATE TABLE public.media (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  user_id uuid,
  org_id uuid,
  claim_id uuid,
  type text NOT NULL CHECK (type = ANY (ARRAY['photo'::text, 'lidar_room'::text])),
  status text NOT NULL DEFAULT 'uploaded'::text CHECK (status = ANY (ARRAY['pending'::text, 'uploading'::text, 'uploaded'::text, 'annotating'::text, 'done'::text, 'error'::text])),
  label text,
  storage_path text,
  anno_count integer,
  qc jsonb,
  annotation_json jsonb,
  last_error text,
  redaction_json jsonb,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  derived jsonb,
  CONSTRAINT media_pkey PRIMARY KEY (id),
  CONSTRAINT media_claim_id_fkey FOREIGN KEY (claim_id) REFERENCES public.claims(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  email text NOT NULL,
  display_name text,
  is_admin boolean NOT NULL DEFAULT false,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.routes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  date date NOT NULL,
  user_id uuid,
  org_id uuid,
  optimized_order ARRAY NOT NULL,
  total_distance_km numeric,
  estimated_duration_minutes integer,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text])),
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  metadata jsonb,
  CONSTRAINT routes_pkey PRIMARY KEY (id)
);
CREATE TABLE public.stops (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  route_id uuid,
  claim_id uuid,
  stop_order integer NOT NULL,
  address text,
  coordinates jsonb,
  estimated_arrival timestamp with time zone,
  actual_arrival timestamp with time zone,
  estimated_departure timestamp with time zone,
  actual_departure timestamp with time zone,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text, 'skipped'::text])),
  notes text,
  CONSTRAINT stops_pkey PRIMARY KEY (id),
  CONSTRAINT stops_route_id_fkey FOREIGN KEY (route_id) REFERENCES public.routes(id),
  CONSTRAINT stops_claim_id_fkey FOREIGN KEY (claim_id) REFERENCES public.claims(id)
);